webpackHotUpdate("conceptuelle",{

/***/ "./packages/mars-theme/src/components/automata/automata.js":
/*!*****************************************************************!*\
  !*** ./packages/mars-theme/src/components/automata/automata.js ***!
  \*****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/styled-base */ \"./node_modules/@emotion/styled-base/dist/styled-base.browser.esm.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var framer_motion__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! framer-motion */ \"./node_modules/framer-motion/dist/framer-motion.es.js\");\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash */ \"./node_modules/lodash-es/lodash.js\");\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! frontity */ \"./node_modules/frontity/dist/src/index.js\");\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(frontity__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _emotion_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @emotion/core */ \"./node_modules/@emotion/core/dist/core.browser.esm.js\");\n/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! classnames */ \"./node_modules/classnames/index.js\");\n/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(classnames__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _cell_Cell__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./cell/Cell */ \"./packages/mars-theme/src/components/automata/cell/Cell.js\");\n/* harmony import */ var _automata_css__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./automata.css */ \"./packages/mars-theme/src/components/automata/automata.css\");\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__(){return\"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";}var initialConfig={generation:0,height:20,width:57,speed:1000};function createArray(initialConfig){// Create the 2D array\nvar arr=[];for(var i=0;i<initialConfig.height;i++){arr[i]=[];}return arr;}var initialGrid=createArray(initialConfig);function fillRandom(grid,config){// Randomly fill the grid\nfor(var row=0;row<config.height;row++){// Iterate through the rows\nfor(var item=0;item<config.width;item++){// Iterate through the cells\nvar randomNumber=Math.random();// Generate random number \nvar randomInt=randomNumber*2;// Convert number to int\nvar randomBinary=Math.floor(randomInt);// Change number to either 0 or 1\nif(randomBinary===1){grid[row][item]=1;}else{grid[row][item]=0;}}}}fillRandom(initialGrid,initialConfig);// Fill initial 2D array with random black and white values\nvar Automata=(_ref)=>{var{state}=_ref;var[currentGrid,updateGrid]=Object(react__WEBPACK_IMPORTED_MODULE_1__[\"useState\"])(initialGrid);var[isActive,setIsActive]=Object(react__WEBPACK_IMPORTED_MODULE_1__[\"useState\"])(true);function toggle(){setIsActive(!isActive);}function reset(){setSeconds(0);setIsActive(true);}Object(react__WEBPACK_IMPORTED_MODULE_1__[\"useEffect\"])(()=>{var interval=null;if(isActive){interval=setInterval(()=>{setNextGrid();},1000);}else if(!isActive&&isActive!==0){clearInterval(interval);}return()=>clearInterval(interval);},[isActive,currentGrid]);function isLive(rowIndex,colIndex,grid){var cell=grid[rowIndex][colIndex];if(cell===0){return false;}return true;}function countNeighbors(x,y,grid){var n=y!=initialConfig.width-1;// Has Northern neighbors\nvar e=x!=0;// Has Eastern neighbors\nvar s=y!=0;// Has Southern neighbors\nvar w=x!=initialConfig.height-1;// Has Western neighbors\nvar count=0;if(n&&isLive(x,y+1,grid))count++;if(n&&e&&isLive(x-1,y+1,grid))count++;if(e&&isLive(x-1,y,grid))count++;if(s&&e&&isLive(x-1,y-1,grid))count++;if(s&&isLive(x,y-1,grid))count++;if(s&&w&&isLive(x+1,y-1,grid))count++;if(w&&isLive(x+1,y,grid))count++;if(n&&w&&isLive(x+1,y+1,grid))count++;return count;}function isUnderPopulated(c){// Living cells with fewer than 2 living neighbors die \nreturn c<2;}function isHealthy(c){// Living cells with 2 or 3 living neighbord continue to live\nreturn c==2||c==3;}function isOverPopulated(c){// Living cells with more than 3 living neighbors die\nreturn c>3;}function isBorn(c){// Dead cells with 3 living neighbors become a living cell, simulating reproduction\nreturn c==3;}function liveOrDie(x,y,grid){var c=countNeighbors(x,y,grid);var underPopulated;var healthy;var overPopulated;var born;if(isLive(x,y,grid)){underPopulated=isUnderPopulated(c);healthy=isHealthy(c);overPopulated=isOverPopulated(c);}else{born=isBorn(c);}if(underPopulated||overPopulated){return false;}if(healthy||born){return true;}}function createNextGrid(gridClone){var newGrid=Object(lodash__WEBPACK_IMPORTED_MODULE_3__[\"cloneDeep\"])(gridClone);gridClone.map((rowVal,rowIdx)=>{rowVal.map((colVal,colIdx)=>{if(liveOrDie(rowIdx,colIdx,gridClone)===true){newGrid[rowIdx][colIdx]=1;}if(liveOrDie(rowIdx,colIdx,gridClone)===false){newGrid[rowIdx][colIdx]=0;}});});console.log('new grid',newGrid);return newGrid;}function setNextGrid(){var gridClone=Object(lodash__WEBPACK_IMPORTED_MODULE_3__[\"cloneDeep\"])(currentGrid);var updatedGrid=createNextGrid(gridClone);updateGrid(currentGrid=updatedGrid);}var colorChange=event=>{console.log('beep');};return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_5__[\"jsx\"])(Container,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_5__[\"jsx\"])(_emotion_core__WEBPACK_IMPORTED_MODULE_5__[\"Global\"],{styles:/*#__PURE__*/Object(_emotion_core__WEBPACK_IMPORTED_MODULE_5__[\"css\"])(_automata_css__WEBPACK_IMPORTED_MODULE_8__[\"default\"],\";label:Automata;\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"))}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_5__[\"jsx\"])(\"div\",{style:{display:\"grid\",gridTemplateColumns:\"12px 12px 12px 12px 12px 12px 12px 12px 12px 12px 12px 12px 12px 12px 12px 12px 12px 12px 12px 12px 12px 12px 12px 12px 12px 12px 12px 12px 12px 12px 12px 12px 12px 12px 12px 12px 12px 12px 12px 12px 12px 12px 12px 12px 12px 12px 12px 12px 12px 12px 12px 12px 12px 12px 12px 12px 12px\",gridGap:\"3px\"}},initialGrid.map((row,rowIdx)=>{return row.map((cell,colIdx)=>{return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_5__[\"jsx\"])(_cell_Cell__WEBPACK_IMPORTED_MODULE_7__[\"default\"],{live:currentGrid[rowIdx][colIdx]});});}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_5__[\"jsx\"])(\"button\",{onClick:setNextGrid})));};// Connect the Header component to get access to the `state` in it's `props`\n/* harmony default export */ __webpack_exports__[\"default\"] = (Object(frontity__WEBPACK_IMPORTED_MODULE_4__[\"connect\"])(Automata));var Container=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"ev6bfb40\",label:\"Container\"})( false?undefined:{name:\"1ven0wc\",styles:\"width:1000px;max-width:100%;padding:30px;cursor:url(\\\"https://i.imgur.com/jAubvc0.png\\\"),auto;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var WhiteBox=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"ev6bfb41\",label:\"WhiteBox\"})( false?undefined:{name:\"bs2f4c\",styles:\"width:10px;height:10px;border-radius:20;background-color:#fff;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var BlackBox=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"ev6bfb42\",label:\"BlackBox\"})( false?undefined:{name:\"cklm12\",styles:\"width:10px;height:10px;border-radius:20;background-color:#000;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./packages/mars-theme/src/components/automata/automata.js\n");

/***/ })

})